# -*- coding: utf-8 -*-
"""Forecasting_Stock_Price.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15sYGjuOgktvKKyCielgDVhUtoAIDV5yY

Dicoding IDCamp 2024: Machine Learning Terapan

Predictive Analytics

Nama: Nugroho Adi Wirapratama

Email: adiwira009@gmail.com

LinkedIn: https://www.linkedin.com/in/nug-adiwira/

Github: https://github.com/adiwira09

Untuk mempercepat pengambilan data harga saham BBRI di Yahoo Finance, saya menggunakan extension **Chrome: Data Scraper**. Kemudian saya export ke dalam bentuk .csv

# Import library
"""

!pip install keras-tuner -q

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score

from keras_tuner import RandomSearch

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.optimizers import Adam

from pandas.plotting import autocorrelation_plot, lag_plot

"""# Load data"""

df = pd.read_csv('finance.csv')
df.head()

"""- Date : Tanggal perdagangan saham yang tercatat, yaitu hari di mana transaksi saham dilakukan di pasar.
Open : Harga pertama yang tercatat pada saat pasar dibuka pada hari tersebut.
- High : Harga tertinggi yang tercatat selama sesi perdagangan pada hari itu.
- Low : Harga terendah yang tercatat selama sesi perdagangan pada hari itu.
- Closing : Harga saham pada saat pasar ditutup pada akhir sesi perdagangan.
- Volume : Jumlah total saham yang diperdagangkan pada hari tersebut.

# Data Understanding
"""

baris, kolom = df.shape
print(f'Jumlah baris: {baris}')
print(f'Jumlah kolom: {kolom}')

df.info()

"""Semua tipe data kolom pada dataset belum sesuai, masih berupa object/string."""

# Mengonversi kolom 'Date' menjadi datetime
df['Date'] = pd.to_datetime(df['Date'], format='%b %d, %Y')

# Mengonversi kolom 'Open', 'High', 'Low', 'Close', 'Volume' menjadi numerik
df['Open'] = df['Open'].replace({',': ''}, regex=True).astype(float)
df['High'] = df['High'].replace({',': ''}, regex=True).astype(float)
df['Low'] = df['Low'].replace({',': ''}, regex=True).astype(float)
df['Close'] = df['Close'].replace({',': ''}, regex=True).astype(float)
df['Volume'] = df['Volume'].replace({',': ''}, regex=True).astype(float)

"""## Cek NaN value"""

df.isnull().sum()

"""Dataset memiliki null value pada kolom Low, Close, dan Volume sebanyak 6 baris"""

df.head()

# Melihat data NaN
df[df.isna().any(axis=1)]

"""Terlihat bahwa value hanya terisi pada kolom Open. Jika kita lihat pada kolom lainnya, value dari Open pun tidak berada di rentang **puluhan/ratusan**.

Setelah meihat kembali pada data, NaN value tersebut adalah **besaran nilai dividen yang dibagikan oleh perusahaan kepada investor** pada hari itu.

Oleh karena itu baris tersebut di drop/hapus.
"""

df_clean = df.dropna()

df_clean.isnull().sum()

"""## Cek duplikat"""

print(f'Jumlah data duplikat: {df.duplicated().sum()}')

"""Dataset tidak memiliki duplikat data.

## EDA

### Closing Price Trend
"""

# Set kolom Date sebagai index
df_clean.set_index('Date', inplace=True)

# 1. Plot harga penutupan
plt.figure(figsize=(12,4))
plt.plot(df_clean['Close'])
plt.title('BBRI Close Price')
plt.xlabel('Date')
plt.ylabel('Price')
plt.grid(True)
plt.show()

"""Grafik ini memperlihatkan fluktuasi harga saham BBRI dari awal 2022 hingga awal 2025. Secara keseluruhan, ada tren kenaikan yang signifikan dari 2022 ke 2023, dengan beberapa fluktuasi tajam. Kemudian, harga saham mulai turun secara drastis setelah 2024.

Harga saham BBRI mengalami kenaikan yang tajam di beberapa titik, namun diikuti dengan penurunan yang signifikan, terutama di 2024 dan 2025. Ada beberapa lonjakan harga yang sangat tinggi di beberapa bulan.
"""

# Menghitung moving average 30 hari (bisa disesuaikan)
df_clean['MA30'] = df_clean['Close'].rolling(window=30).mean()

# Visualisasi harga saham dengan moving average
plt.figure(figsize=(12, 4))
plt.plot(df_clean['Close'], label='Harga Saham BBRI', alpha=0.7)
plt.plot(df_clean['MA30'], label='30 Hari Moving Average', color='red', linestyle='-')
plt.title('Harga Saham BBRI dengan Moving Average (30 Hari)')
plt.xlabel('Tanggal')
plt.ylabel('Harga Saham (IDR)')
plt.grid(True)
plt.legend()
plt.show()

"""Moving average 30 hari memberikan gambaran bahwa harga saham BBRI cenderung naik dengan lonjakan-lonjakan signifikan, meskipun ada periode penurunan yang cukup tajam. Moving average ini membantu menghaluskan fluktuasi harian dan memperlihatkan tren jangka panjang yang lebih stabil.

### Rata-rata closing price per bulan
"""

# Mengelompokkan data berdasarkan bulan dan menghitung rata-rata harga saham per bulan
monthly_data = df_clean.resample('M').mean()

# Visualisasi harga saham rata-rata per bulan
plt.figure(figsize=(12, 4))
plt.plot(monthly_data.index, monthly_data['Close'], label='Harga Saham Rata-rata Per Bulan')
plt.title('Harga Saham BBRI Rata-rata Per Bulan')
plt.xlabel('Bulan')
plt.ylabel('Harga Saham (IDR)')
plt.grid(True)
plt.legend()
plt.show()

"""Ada beberapa bulan dengan harga yang lebih tinggi, dan ada beberapa bulan yang harga sahamnya lebih rendah. Hal ini bisa menunjukkan adanya pola musiman atau faktor-faktor eksternal yang mempengaruhi harga saham pada waktu-waktu tertentu.

### Closing price trend by Year
"""

df_yearly = df_clean[['Close']].copy()
df_yearly['Year'] = df_yearly.index.year

# Membuat plot untuk setiap tahun
plt.figure(figsize=(12, 8))

years = df_yearly['Year'].unique()
for i, year in enumerate(years, 1):
    plt.subplot(len(years), 1, i)
    yearly_data = df_yearly[df_yearly['Year'] == year]
    plt.plot(yearly_data['Close'], linestyle='-')
    plt.title(f'Harga Penutupan Tahun {year}')
    plt.xlabel('Date')
    plt.ylabel('Harga Penutupan')

plt.tight_layout()
plt.show()

"""Harga penutupan BBRI cenderung akan naik di awal tahun sampai pertengahan tahun, dan akan kembali naik mendekati akhir tahun.

Tahun 2024 agar berbeda dikarenakan adanya keresahan investor mengenai isu politik dengan pemilihan presiden baru.

### Distribusi Closing Price
"""

# Visualisasi distribusi harga saham BBRI dengan histogram
plt.figure(figsize=(10, 5))
sns.histplot(df_clean['Close'], bins=50, kde=True)  # KDE (Kernel Density Estimation) untuk memperlihatkan distribusi
plt.title('Distribusi Harga Saham BBRI')
plt.xlabel('Harga Saham (IDR)')
plt.ylabel('Frekuensi')
plt.grid(True)
plt.show()

# Visualisasi distribusi harga saham BBRI dengan box plot
plt.figure(figsize=(10, 6))
sns.boxplot(x=df_clean['Close'])
plt.title('Box Plot Harga Saham BBRI')
plt.xlabel('Harga Saham (IDR)')
plt.grid(True)
plt.show()

from scipy.stats import skew, kurtosis

# Menghitung skewness dan kurtosis dari harga saham
skewness = skew(df_clean['Close'])
kurt = kurtosis(df_clean['Close'])

print(f"Skewness: {skewness}")
print(f"Kurtosis: {kurt}")

"""- **Distribusi Tidak Normal**
- **Skewness Positif**

### Return harian
"""

# Visualisasi return harian
df_clean['Daily Return'] = df_clean['Close'].pct_change() * 100

plt.figure(figsize=(14, 4))
plt.plot(df_clean['Daily Return'], label='Return Harian (%)')
plt.title('Return Harian Harga Saham BBRI')
plt.xlabel('Tanggal')
plt.ylabel('Return Harian (%)')
plt.grid(True)
plt.legend()
plt.show()

"""Grafik menunjukkan fluktuasi harian yang cukup besar, dengan banyak lonjakan tajam baik ke atas maupun ke bawah. Beberapa puncak tajam menunjukkan periode dengan perubahan harga yang sangat besar dalam waktu singkat. Ini mengindikasikan bahwa harga saham BBRI mengalami volatilitas yang cukup tinggi di banyak titik waktu."""

volatilitas = df_clean['Daily Return'].std()
print(f"Volatilitas harian (standar deviasi): {volatilitas}")

"""**1.615%** menunjukkan bahwa perubahan harga saham BBRI per hari cenderung cukup besar dalam konteks volatilitas. Ini berarti harga saham BBRI dapat bergerak naik atau turun lebih dari 1.6% dalam satu hari secara rata-rata.

# Data Preparation

## Normalisasi
"""

# Menggunakan MinMaxScaler untuk normalisasi data harga saham
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df_clean[['Close']])

"""## Time-step & Split dataset"""

# Menentukan jumlah time steps (lag)
time_step = 5

# Membagi data menjadi training dan testing set
train_size = int(len(df_clean) * 0.8)
train_data = scaled_data[:train_size]
test_data = scaled_data[train_size:]

def create_dataset(data, time_step=1):
    X, y = [], []
    for i in range(len(data) - time_step - 1):
        X.append(data[i:(i + time_step), 0])
        y.append(data[i + time_step, 0])
    return np.array(X), np.array(y)

# Membuat dataset dengan time_step untuk training dan testing
X_train, y_train = create_dataset(train_data, time_step)
X_test, y_test = create_dataset(test_data, time_step)

# Reshaping data untuk LSTM [samples, time steps, features]
X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

# Menampilkan dimensi data
X_train.shape, X_test.shape

"""# Model Development

## Tuning
"""

def build_model(hp):
    model = Sequential()

    # Mengatur jumlah unit LSTM secara dinamis
    model.add(LSTM(units=hp.Int('units', min_value=50, max_value=200, step=50),
                   return_sequences=True, input_shape=(X_train.shape[1], 1)))
    model.add(Dropout(hp.Float('dropout', min_value=0.2, max_value=0.5, step=0.1)))  # Regularisasi dropout

    # Menambahkan lapisan LSTM kedua
    model.add(LSTM(units=hp.Int('units_2', min_value=50, max_value=200, step=50), return_sequences=False))
    model.add(Dropout(hp.Float('dropout_2', min_value=0.2, max_value=0.5, step=0.1)))

    # Lapisan output
    model.add(Dense(units=1))

    # Compile model
    model.compile(optimizer=Adam(), loss='mean_squared_error')

    return model

tuner = RandomSearch(build_model,
                     objective='val_loss',
                     max_trials=5,  # Menentukan berapa banyak kombinasi yang akan dicoba
                     executions_per_trial=1,  # Jumlah percobaan untuk setiap kombinasi
                     directory='my_dir',
                     project_name='lstm_tuning')

tuner.search(X_train, y_train, epochs=20, batch_size=32, validation_data=(X_test, y_test))

# Menampilkan kombinasi hyperparameter terbaik
best_model = tuner.get_best_models(num_models=1)[0]
best_params = tuner.oracle.get_best_trials(num_trials=1)[0].hyperparameters.values
print("Best Hyperparameters:", best_params)

"""## Build model with best parameter"""

model = Sequential(name='lstm_forecast')

model.add(LSTM(150, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.4))

model.add(LSTM(200, return_sequences=False))
model.add(Dropout(0.3))

model.add(Dense(1))

model.compile(optimizer=Adam(), loss='mean_squared_error')
model.summary()

history = model.fit(X_train,
                    y_train,
                    epochs=20,
                    batch_size=32,
                    validation_data=(X_test, y_test))

# Get training and validation loss values
train_loss = history.history['loss']
val_loss = history.history['val_loss']

# Plotting loss values
plt.figure(figsize=(15, 5))
plt.subplot(1, 2, 1)
plt.plot(train_loss, label='Training Loss')
plt.plot(val_loss, label='Validation Loss')
plt.title('Training vs Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

# Show the plot
plt.tight_layout()
plt.show()

predictions = model.predict(X_test)

predictions = scaler.inverse_transform(predictions)
y_test_actual = scaler.inverse_transform(y_test.reshape(-1, 1))

rmse_lstm = np.sqrt(mean_squared_error(y_test_actual, predictions))
mape_lstm = np.mean(np.abs((y_test_actual - predictions) / y_test_actual)) * 100
r2_lstm = r2_score(y_test_actual, predictions)

print(f'RMSE: {rmse_lstm}')
print(f'MAPE: {mape_lstm}')
print(f'R² Score: {r2_lstm}')

# Visualisasi hasil prediksi LSTM vs Actual
plt.figure(figsize=(12, 3))
plt.plot(df.index[train_size + time_step + 1:], y_test_actual, label='Harga Aktual', color='blue')
plt.plot(df.index[train_size + time_step + 1:], predictions, label='Prediksi LSTM', color='red')
plt.title('Prediksi Harga Saham BBRI dengan LSTM')
plt.xlabel('Tanggal')
plt.ylabel('Harga Penutupan')
plt.legend()
plt.xticks(rotation=45)
plt.grid(True)
plt.show()